---
- hosts: rpi42
  vars:
    remove_packages: false
    packages: true
    camera_mountpoint: /camera
    files_mountpoint: /files
    files_blkid: "e1814c17-048a-4d29-8515-a60b76f992bf"
    camera_blkid: "38e39da5-152c-4650-9f1e-d1f95af00f25"
    netcam_ip: "10.60.0.17"
  remote_user: pi
  become: yes
  tasks:

### Delete packages from X11 installation of Raspbian
  - name: "delete packages"
    apt:
      update_cache: no
      name:
        - xserver-xorg
        - lxde
        - plymouth
      state: absent
      autoremove: yes
      purge: yes
    when: remove_packages

  - name: "install packages"
    apt:
      update_cache: no
      name:
        - aptitude
        - avahi-daemon
        - docker-compose
        - docker.io
        - ethtool
        - fake-hwclock
        - git
        - hdparm
        - htop
        - iotop
        - locales
        - mc
        - motion
        - netatalk
        - nfs-kernel-server
        - ntp
        - ntpdate
        - portmap
        - proftpd
        - prometheus-node-exporter
        - rename
        - rfkill
        - rsync
        - samba
        - screen
        - smartmontools
        - transmission-daemon
        - transmission-cli
        - sudo
        - usbutils
        - vim
        - wget
      state: present
    when: packages
    tags:
      - packages


### s alias
  - name: "Add aliases to /etc/profile"
    blockinfile:
      path: /etc/profile
      insertafter: EOF
      block: |
        alias s='sudo su -'
      marker: "# {mark} ANSIBLE MANAGED BLOCK"
      backup: yes

### sudoers
  - name: "sudoers NOPASSWD"
    lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^%sudo\s'
      line: '%sudo ALL=(ALL)  NOPASSWD: ALL'

### users
  - name: "Create user"
    user:
      name: bazilio
      # password created with:
      # python -c 'import crypt; print crypt.crypt("This is my Password", "$1$SomeSalt$")'
      password: $1$Ub9VzL9S$9TF/6iNcJp4j5VixhZksK0
      home: "/home/bazilio"
      comment: "Hello there"
      shell: "/bin/bash"
      groups:
      - sudo
      - adm
      - dialout
      - cdrom
      - audio
      - video
      - plugdev
      - games
      - users
      - input
      - netdev
      - nogroup

  - name: "Create bazilio user .ssh folder"
    file:
      path: "/home/bazilio/.ssh"
      state: directory
      owner: bazilio
      group: bazilio
      mode: 0700


  - name: "Create bazilio user authorized_keys file"
    copy:
      dest: "/home/bazilio/.ssh/authorized_keys"
      src: ./files/authorized_keys.bazilio_user
      owner: bazilio
      group: bazilio
      mode: 0600


### boot config
  - name: Place config.txt
    copy:
      dest: "/boot/config.txt"
      src: ./files/boot/config.txt
      owner: root
      group: root
      mode: 0755

### mounts
  - name: "Create files mount folder"
    file: path="{{ files_mountpoint }}" state=directory mode=777 owner=nobody group=nogroup

  - name: "Create camera mount folder"
    file: path="{{ camera_mountpoint }}" state=directory mode=777 owner=nobody group=nogroup


  - name: "Mount /files"
    mount:
      path: "{{ files_mountpoint }}"
      src: UUID={{ files_blkid }}
      fstype: ext4
      state: mounted
      opts: defaults,noatime

  - name: "Mount /camera"
    mount:
      path: "{{ camera_mountpoint }}"
      src: UUID={{ camera_blkid }}
      fstype: ext4
      state: mounted
      opts: defaults,noatime



### Samba
  - name: "Render SMB config"
    template:
      dest: /etc/samba/smb.conf
      src: ./templates/smb.conf.j2
      backup: yes
      owner: root
      group: root
      mode: 0644
    register: smbconf
    tags:
      - samba

  - name: restart samba
    systemd:
      name: smbd.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: smbconf.changed
    tags:
      - samba

### AFP
  - name: "Render Netatalk config"
    template:
      dest: /etc/netatalk/afp.conf
      src: ./templates/afp.conf.j2
      backup: yes
      owner: root
      group: staff
      mode: 0644
    register: afp_conf

  - name: "Restart Netatalk service"
    systemd:
      name: netatalk.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: afp_conf.changed

### prometheus-node-exporter
  - name: "prometheus-node-exporter default settings"
    copy:
      dest: "/etc/default/prometheus-node-exporter"
      src: ./files/prometheus-node-exporter
      owner: root
      group: root
      mode: 0644
    register: prometheus_node_exporter_config

  - name: "Restart prometheus-node-exporter service"
    systemd:
      name: prometheus-node-exporter.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: prometheus_node_exporter_config.changed

### prometheus server
### (config for Docker container)
  - name: "Render Prometheus config"
    template:
      dest: /root/prometheus.yml
      src: ./templates/prometheus.yml.j2
      backup: yes
      owner: root
      group: root
      mode: 0644
    register: prometheusconf

  - name: "Render Grafana config"
    template:
      dest: /root/grafana.ini
      src: ./templates/grafana.ini.j2
      backup: yes
      owner: root
      group: root
      mode: 0644
    register: grafanaconf

### FTP service setup
# user upload
  - name: "Create user upload"
    user:
      name: "upload"
      password: $1$werlkjwe$WfY0pi4BVQfkEoUu/pA0K0 # U...123
      create_home: no
      comment: "upload"
      shell: /usr/sbin/nologin
      groups:
        - nogroup

  - name: "Render proftpd.conf"
    template:
      dest: "/etc/proftpd/proftpd.conf"
      src: ./templates/proftpd.conf.j2
      owner: "root"
      group: "root"
      mode: 0644
    register: ftp_conf

  - name: "Restart proftpd service"
    systemd:
      name: proftpd.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: ftp_conf.changed

### NFS server
  - name: "Render /etc/exports"
    template:
      dest: "/etc/exports"
      src: ./templates/exports.j2
      owner: "root"
      group: "root"
      mode: 0644
    register: nfs_conf

  - name: "Restart NFS service"
    systemd:
      name: nfs-kernel-server.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: nfs_conf.changed

## motion
  - name: "/etc/default/motion"
    lineinfile:
      path: /etc/default/motion
      state: present
      regexp: '^start_motion_daemon\=no\s'
      line: 'start_motion_daemon=yes'

  - name: "Render Motion config"
    template:
      dest: /etc/motion/motion.conf
      src: ./templates/motion.conf.j2
      backup: yes
      owner: root
      group: motion
      mode: 0644
    register: motionconf

  - name: "Restart Motion"
    systemd:
      name: motion.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: motionconf.changed

  - name: Empty motion files cron
    ansible.builtin.cron:
      name: "Remove empty motion files"
      minute: "0"
      hour: "0"
      job: "find {{ camera_mountpoint }} -type f -name *.mp4 -size 0c -delete; find {{ camera_mountpoint }} -maxdepth 3 -type d -empty ! -iname 'lost+found' -delete"

  - name: Clean old camera recordings
    ansible.builtin.cron:
      name: "Clean old camera recordings"
      minute: "0"
      hour: "1"
      job: "find {{ camera_mountpoint }} -mindepth 2 -type f \\( -name '*.mp4' -o -name '*.mkv' \\) ! -ipath '*timelapse/*' -mtime +50 -delete -print"


### Transmission
  - name: "Set sysctl config for Transmission"
    template:
      dest: /etc/sysctl.d/20-transmission.conf
      src: ./templates/20-transmission.conf.j2
      owner: root
      group: root
    register: transmission_sysctl
    tags:
      - transmission

  - name: "Apply sysctl config for Transmission"
    command: "/sbin/sysctl -p"
    when: transmission_sysctl.changed
    become: true
    become_user: root
    tags:
      - transmission

  - name: "Render Transmission config"
    template:
      dest: /etc/transmission-daemon/settings.json
      src: ./templates/transmission.settings.json.j2
      backup: yes
      owner: debian-transmission
      group: debian-transmission
      mode: 0600
    register: transmission_conf
    tags:
      - transmission

  - name: "Restart Transmission service"
    systemd:
      name: transmission-daemon.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: transmission_conf.changed or transmission_sysctl.changed
    tags:
      - transmission
