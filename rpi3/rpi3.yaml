---
- hosts: rpi3
  vars:
    packages: true
    hdd_mountpoint: /files
  remote_user: bazilio
  become: yes
  tasks:

  - name: "install packages"
    apt:
      update_cache: yes
      name:
        - mc
        - vim
        - screen
        - cups
        - hplip
        - sane
        - ntpdate
        - tmux 
        - git
        - samba
        - smartmontools
        - ntpdate
        - htop
        - iotop
        - prometheus-node-exporter
        - portmap
        - transmission-daemon
        - transmission-cli
        - netatalk
      state: latest

    tags:
      - packages
    when: packages

### s alias
  - name: "Add aliases to /etc/profile"
    blockinfile:
      path: /etc/profile
      insertafter: EOF
      block: |
        alias s='sudo su -'
      marker: "# {mark} ANSIBLE MANAGED BLOCK"
      backup: yes

### sudoers
  - name: "sudoers NOPASSWD"
    lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^%sudo\s'
      line: '%sudo ALL=(ALL)  NOPASSWD: ALL'


### users
  - name: "Create user bazilio"
    user:
      name: bazilio
      # password created with:
      # python -c 'import crypt; print crypt.crypt("This is my Password", "$1$SomeSalt$")'
      password: $1$Ub9VzL9S$9TF/6iNcJp4j5VixhZksK0
      home: "/home/bazilio"
      comment: "Maksym Pylypenko"
      groups:
      - sudo
      - adm
      - lpadmin
      - scanner
      - dialout
      - cdrom
      - audio
      - video
      - plugdev
      - games
      - users
      - input
      - netdev
      - spi
      - i2c
      - gpio
      - backup

  - name: "fix pi password"
    user:
      name: pi
      # password created with:
      # python -c 'import crypt; print crypt.crypt("This is my Password", "$1$SomeSalt$")'
      password: $1$Ub9VzL9S$9TF/6iNcJp4j5VixhZksK0

  - name: "Create bazilio user .ssh folder"
    file:
      path: "/home/bazilio/.ssh"
      state: directory
      recurse: no
      owner: bazilio
      group: bazilio
      mode: 0700


  - name: "Create bazilio user authorized_keys file"
    copy:
      dest: "/home/bazilio/.ssh/authorized_keys"
      src: ./files/authorized_keys.bazilio_user
      owner: bazilio
      group: bazilio
      mode: 0600


### boot config
  - name: Place /boot/config.txt
    copy:
      dest: "/boot/config.txt"
      src: ./files/boot/config.txt
      owner: root
      group: root
      mode: 0755

## Samba
  - name: "Render SMB config"
    template:
      dest: /etc/samba/smb.conf
      src: ./templates/smb.conf.j2
      backup: yes
      owner: root
      group: root
      mode: 0644
    register: smbconf
    tags:
      - samba

  - name: restart samba
    systemd:
      name: smbd.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: smbconf.changed
    tags:
      - samba

### prometheus-node-exporter
  - name: "prometheus-node-exporter default settings"
    copy:
      dest: "/etc/default/prometheus-node-exporter"
      src: ./files/prometheus-node-exporter
      owner: root
      group: root
      mode: 0644
    register: prometheus_node_exporter_config

  - name: "Restart prometheus-node-exporter service"
    systemd:
      name: prometheus-node-exporter.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: prometheus_node_exporter_config.changed

### HDD
  - name: "Create HDD mount"
    file: path="{{ hdd_mountpoint }}" state=directory mode=0777 owner=root

  - name: "Mount HDD"
    mount:
      path: "{{ hdd_mountpoint }}"
      src: UUID=1ce84376-d6cf-4242-9e87-a288cdd092ac
      fstype: ext4
      state: mounted
      opts: defaults,noatime

  - name: "Create user backup"
    user:
      name: backup
      password: $6$XshmWkCHPD9Yr/4U$eSgd5xWGfVI9TEVvGtBRq9vL24QGMTNdyfT7mp83sgd0TmYVRMWBipLhppV.es.KK44QRMZ5TJ82BY1v9uRC3.
      home: "{{ hdd_mountpoint }}/.timemachine"
      comment: "For Time Machine backups"
      groups:
      - backup

  - name: "Create TimeMachine subfolder"
    file: path="{{ hdd_mountpoint }}/.timemachine" state=directory mode=0770 owner=backup group=backup

  - name: "Create logs subfolder"
    file: path="{{ hdd_mountpoint }}/.log" state=directory mode=0777 owner=nobody


### Time Machine
  - name: "Render Netatalk config"
    template:
      dest: /etc/netatalk/afp.conf
      src: ./templates/afp.conf.j2
      backup: yes
      owner: root
      group: staff
      mode: 0644
    register: afp_conf

  - name: "Restart Netatalk service"
    systemd:
      name: netatalk.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: afp_conf.changed

### Resilio Sync
  - name: "Add Resilio Sync apt key"
    apt_key:
      url: https://linux-packages.resilio.com/resilio-sync/key.asc
      state: present
    tags:
      - resilio-sync

  - name: "Add Resilio Sync apt repository"
    apt_repository:
      repo: deb [arch=armhf] http://linux-packages.resilio.com/resilio-sync/deb resilio-sync non-free
      update_cache: yes
    tags:
      - resilio-sync

  - name: "Install Resilio Sync package"
    apt:
      name: resilio-sync
      state: latest
    tags:
      - resilio-sync

  - name: "Create Resilio Sync config folder"
    file: path="{{ hdd_mountpoint }}/.configs/.sync" state=directory mode=0755 owner=root

  - name: "Render Resilio Sync config json"
    template:
      dest: /etc/resilio-sync/config.json
      src: ./templates/resilio-sync.config.j2
      owner: root
      group: root
      mode: 0644
    register: rslconfig
    tags:
      - resilio-sync

  - name: "Render Resilio Sync systemd service file"
    template:
      dest: /lib/systemd/system/resilio-sync.service
      src: ./templates/resilio-sync.service.j2
      owner: root
      group: root
      mode: 0644
    register: rslconfig
    tags:
      - resilio-sync

  - name: "Restart Resilio Sync service"
    systemd:
      name: resilio-sync.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: rslconfig.changed
    tags:
      - resilio-sync

### Transmission
  - name: "Set sysctl config for Transmission"
    template:
      dest: /etc/sysctl.d/20-transmission.conf
      src: ./templates/20-transmission.conf.j2
      owner: root
      group: root
    register: transmission_sysctl
    tags:
      - transmission

  - name: "Apply sysctl config for Transmission"
    command: "/sbin/sysctl -p"
    when: transmission_sysctl.changed
    become: true
    become_user: root
    tags:
      - transmission

  - name: "Render Transmission config"
    template:
      dest: /etc/transmission-daemon/settings.json
      src: ./templates/transmission.settings.json.j2
      backup: yes
      owner: debian-transmission
      group: debian-transmission
      mode: 0600
    register: transmission_conf
    tags:
      - transmission

  - name: "Restart Transmission service"
    systemd:
      name: transmission-daemon.service
      daemon_reload: yes
      enabled: yes
      masked: no
      state: restarted
    when: transmission_conf.changed or transmission_sysctl.changed
    tags:
      - transmission

### vimrc
  - name: "vimrc"
    copy:
      dest: "/root/.vimrc"
      src: ../vimrc
      owner: root
      group: root
      mode: 0644
